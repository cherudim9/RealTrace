#include <iostream>
#include "include/basic_types.h"
#include "include/bmpio.h"
#include "include/basic_geometry.h"
#include "include/utility.h"
#include "include/basic_tracer.h"
#include <vector>

using namespace std;

const int width=1280;
const int height=768;

vector<Renderer*> obj_vec;

int main(){
  
  obj_vec.push_back(new PlaneT( Renderer(0.0, 0.0, 1.0, PixelColor(113, 83, 38), false),
                               PointT(0.0, -10.0, 0.0), 
                               PointT(0.0, 1.0, 0.0)));
  obj_vec.push_back(new SphereT( Renderer(0.5, 0.0, 0.5, PixelColor(230, 77, 166), false),
                                PointT(-10.0, 0.0, 0.0),
                                3.0));
  obj_vec.push_back(new SphereT( Renderer(0.5, 0.3, 0.2, PixelColor(74, 221, 74), false),
                                PointT(10.0, 0.0, 0.0),
                                4.0));
  obj_vec.push_back(new SphereT( Renderer(0.0, 0.0, 0.0, PixelColor(255,255,255), true),
                                PointT(0.0, 20.0, 0.0),
                                1.0));

  PointT camera(0.0, 0.0, -10.0), eye(0.0, 0.0, 1.0), head(0.0, 1.0, 0.0);
  
  PixelColor bmp_data[width*height+10];

  for(int i=0, scale=1.0*height/width, x=-10.0; i<width; i++, x+=20.0/width)
    for(int j=0, y=-10.0*scale; j<height; j++, y+=20*scale/height){
      RayT ray(camera, PointT(x, y, -5.0) - camera);
      PointT color;
      Tracer::RayTrace(ray, obj_vec, color, 0);
      bmp_data[i*height+j]=PointT::ToPixelColor(color);
    }

  OutputBmp(width, height, bmp_data, "result.bmp"); 

  return 0;
}
